import base64;exec base64.b64decode('# -*- coding: utf-8 -*-
import __builtin__
if 64 - 64: i11iIiiIii
if 65 - 65: O0 / iIii1I11I1II1 % OoooooooOO - i1IIi
if 73 - 73: II111iiii
if 22 - 22: I1IiiI * Oo0Ooo / OoO0O00 . OoOoOO00 . o0oOOo0O0Ooo / I1ii11iIi11i
if 48 - 48: oO0o / OOooOOo / I11i / Ii1I
if 48 - 48: iII111i % IiII + I1Ii111 / ooOoO0o * Ii1I
if 46 - 46: ooOoO0o * I11i - OoooooooOO
if 30 - 30: o0oOOo0O0Ooo - O0 % o0oOOo0O0Ooo - OoooooooOO * O0 * OoooooooOO
if 60 - 60: iIii1I11I1II1 / i1IIi * oO0o - I1ii11iIi11i + o0oOOo0O0Ooo
if 94 - 94: i1IIi % Oo0Ooo
if 68 - 68: Ii1I / O0
if 46 - 46: O0 * II111iiii / IiII * Oo0Ooo * iII111i . I11i
if 62 - 62: i11iIiiIii - II111iiii % I1Ii111 - iIii1I11I1II1 . I1ii11iIi11i . II111iiii
if 61 - 61: oO0o / OoOoOO00 / iII111i * OoO0O00 . II111iiii
if 1 - 1: II111iiii - I1ii11iIi11i % i11iIiiIii + IiII . I1Ii111
if 55 - 55: iIii1I11I1II1 - I1IiiI . Ii1I * IiII * i1IIi / iIii1I11I1II1
if 79 - 79: oO0o + I1Ii111 . ooOoO0o * IiII % I11i . I1IiiI
import xbmcaddon
if 94 - 94: iII111i * Ii1I / IiII . i1IIi * iII111i
if 47 - 47: i1IIi % i11iIiiIii
if 20 - 20: ooOoO0o * II111iiii
oO0o0o0ooO0oO = xbmcaddon . Addon ( ) . getAddonInfo ( 'id' )
oo0o0O00 = xbmcaddon . Addon ( id = oO0o0o0ooO0oO )
oO = oo0o0O00 . getSetting ( 'dlimage' )
i1iiIIiiI111 = oo0o0O00 . getSetting ( 'news_win' )
oooOOOOO = 'http://gen-tec.co/gentecwiz/PLEASE%20SUBSCRIBE%20TO%20CHARLIE%20TEC%20YOUTUBE/star/sportscatchup/sportscathupmenu1.xml'
__builtin__ . tvdb_api_key = oo0o0O00 . getSetting ( 'tvdb_api_key' )
__builtin__ . tmdb_api_key = oo0o0O00 . getSetting ( 'tmdb_api_key' )
__builtin__ . trakt_client_id = oo0o0O00 . getSetting ( 'trakt_api_client_id' )
__builtin__ . trakt_client_secret = oo0o0O00 . getSetting ( 'trakt_api_client_secret' )
__builtin__ . search_db_location = oo0o0O00 . getSetting ( 'search_db_location' )
if 22 - 22: Ii1I * O0 / o0oOOo0O0Ooo
import os
import sys
if 64 - 64: Ii1I % i1IIi % OoooooooOO
import koding
import koding . router as router
from resources . lib . installa import Dialog_specific
from resources . lib . news_window import Dialog_Example
import resources . lib . search
import resources . lib . sources
import resources . lib . testings
import resources . lib . util . info
import xbmc
import xbmcplugin
from koding import route
from resources . lib . util . xml import JenList , display_list
import resources . lib . util . views
from resources . lib . plugins import *
from language import get_string as _
from resources . lib . plugin import run_hook
if 3 - 3: iII111i + O0
if 42 - 42: OOooOOo / i1IIi + i11iIiiIii - Ii1I
oo0Ooo0 = xbmcaddon . Addon ( ) . getAddonInfo ( 'name' )
I1I11I1I1I = xbmc . translatePath ( 'special://home/' )
OooO0OO = os . path . join ( I1I11I1I1I , 'addons' )
iiiIi = os . path . join ( OooO0OO , oO0o0o0ooO0oO )
IiIIIiI1I1 = "files"
if 86 - 86: i11iIiiIii + Ii1I + ooOoO0o * I11i + o0oOOo0O0Ooo
@ route ( "main" )
def oOoO ( ) :
 if i1iiIIiiI111 == 'true' :
  if 68 - 68: OoOoOO00 . oO0o . i11iIiiIii
  koding . Add_Dir ( name = 'Latest News And Updates' , url = '{"my_text":"Latest News[CR]!!!","my_desc":""}' , mode = 'dialog_example' , folder = False , icon = os . path . join ( iiiIi , 'icon.png' ) , fanart = os . path . join ( iiiIi , 'fanart.jpg' ) )
 if not II ( oooOOOOO ) :
  koding . Add_Dir (
 name = _ ( "Message" ) ,
 url = _ ( "Sorry, server is down" ) ,
 mode = "message" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  koding . Add_Dir (
 name = _ ( "Search" ) ,
 url = "" ,
 mode = "Search" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
  koding . Add_Dir (
 name = _ ( "Testings" ) ,
 url = '{"file_name":"testings.xml"}' ,
 mode = "Testings" ,
 folder = True ,
 icon = xbmcaddon . Addon ( ) . getAddonInfo ( "icon" ) ,
 fanart = xbmcaddon . Addon ( ) . getAddonInfo ( "fanart" ) ,
 content_type = "" )
 if oO == 'true' :
  koding . Add_Dir ( name = 'Download Backgrounds' , url = '{"my_text":"INSTALLA[CR]!!!","my_desc":""}' , mode = 'dialog_specific' , folder = False , icon = os . path . join ( iiiIi , 'icon.png' ) , fanart = os . path . join ( iiiIi , 'fanart.jpg' ) )
  if 14 - 14: Oo0Ooo . I1IiiI / Ii1I
@ route ( mode = 'get_list_uncached' , args = [ "url" ] )
def IiiiI1II1I1 ( url ) :
 global IiIIIiI1I1
 if 95 - 95: OoooooooOO . iIii1I11I1II1
 O00o = JenList ( url , cached = False )
 if not O00o :
  koding . dolog ( _ ( "returned empty for " ) + url )
 O00 = O00o . get_list ( )
 i11I1 = O00o . get_content_type ( )
 if O00 == [ ] :
  return False
 if i11I1 :
  IiIIIiI1I1 = i11I1
 display_list ( O00 , IiIIIiI1I1 )
 return True
 if 8 - 8: iIii1I11I1II1 - IiII % iIii1I11I1II1 - Ii1I * I1IiiI
 if 43 - 43: I1IiiI - iII111i * iIii1I11I1II1
@ route ( mode = "get_list" , args = [ "url" ] )
def II ( url ) :
 global IiIIIiI1I1
 if 97 - 97: I11i % I11i + II111iiii * iII111i
 O00o = JenList ( url )
 if not O00o :
  koding . dolog ( _ ( "returned empty for " ) + url )
 O00 = O00o . get_list ( )
 i11I1 = O00o . get_content_type ( )
 if O00 == [ ] :
  return False
 if i11I1 :
  IiIIIiI1I1 = i11I1
 display_list ( O00 , IiIIIiI1I1 )
 return True
 if 54 - 54: I11i + IiII / iII111i
 if 9 - 9: OoOoOO00 / Oo0Ooo - IiII . i1IIi / I1IiiI % IiII
@ route ( mode = "all_episodes" , args = [ "url" ] )
def o0 ( url ) :
 global IiIIIiI1I1
 import pickle
 import xbmcgui
 I11II1i = pickle . loads ( url )
 IIIII = [ ]
 ooooooO0oo = xbmcgui . DialogProgress ( )
 ooooooO0oo . create ( oo0Ooo0 , _ ( "Loading items" ) )
 IIiiiiiiIi1I1 = len ( I11II1i )
 for I1IIIii , oOoOooOo0o0 in enumerate ( I11II1i ) :
  if ooooooO0oo . iscanceled ( ) :
   break
  OOOO = ( ( I1IIIii + 1 ) * 100 ) / IIiiiiiiIi1I1
  ooooooO0oo . update ( OOOO , _ ( "processing lists" ) , _ ( "%s of %s" ) % (
 I1IIIii + 1 ,
 IIiiiiiiIi1I1 ) )
  if 87 - 87: oO0o / I11i - i1IIi * OOooOOo / OoooooooOO . O0
  O00o = JenList ( oOoOooOo0o0 )
  IIIII . extend ( O00o . get_list ( skip_dialog = True ) )
 IiIIIiI1I1 = "episodes"
 display_list ( IIIII , "episodes" )
 if 1 - 1: II111iiii - I11i / I11i
 if 46 - 46: Ii1I * OOooOOo - OoO0O00 * oO0o - I1Ii111
@ route ( mode = "Settings" )
def oo0 ( ) :
 xbmcaddon . Addon ( ) . openSettings ( )
 if 57 - 57: OOooOOo . OOooOOo
 if 95 - 95: O0 + OoO0O00 . II111iiii / O0
@ route ( mode = "ScraperSettings" )
def O000oo0O ( ) :
 xbmcaddon . Addon ( 'script.module.universalscrapers' ) . openSettings ( )
 if 66 - 66: I1ii11iIi11i / OoOoOO00 - I1IiiI . OOooOOo / I1IiiI * OOooOOo
 if 29 - 29: I1ii11iIi11i % I1IiiI + ooOoO0o / o0oOOo0O0Ooo + OOooOOo * o0oOOo0O0Ooo
@ route ( mode = "ResolverSettings" )
def i1I1iI ( ) :
 xbmcaddon . Addon ( 'script.module.resolveurl' ) . openSettings ( )
 if 93 - 93: iIii1I11I1II1 % oO0o * i1IIi
 if 16 - 16: O0 - I1Ii111 * iIii1I11I1II1 + iII111i
@ route ( mode = "ClearTraktAccount" )
def Ii11iII1 ( ) :
 import xbmcgui
 if xbmcgui . Dialog ( ) . yesno ( oo0Ooo0 , "{0} Trakt {1}. {2}" . format ( _ ( "Delete" ) , _ ( "Settings" ) . lower ( ) , _ ( "Are you sure?" ) ) ) :
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_EXPIRES_AT" , "" )
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_ACCESS_TOKEN" , "" )
  xbmcaddon . Addon ( ) . setSetting ( "TRAKT_REFRESH_TOKEN" , "" )
  if 51 - 51: II111iiii * OoO0O00 % o0oOOo0O0Ooo * II111iiii % I1ii11iIi11i / ooOoO0o
  if 49 - 49: o0oOOo0O0Ooo
@ route ( mode = "message" , args = [ "url" ] )
def IIii1Ii1 ( message ) :
 import xbmcgui
 if len ( message ) > 80 :
  koding . Text_Box ( oo0Ooo0 , message )
 else :
  xbmcgui . Dialog ( ) . ok ( oo0Ooo0 , message )
  if 5 - 5: iII111i % OOooOOo + ooOoO0o % i11iIiiIii + o0oOOo0O0Ooo
  if 60 - 60: OoO0O00 * OoOoOO00 - OoO0O00 % OoooooooOO - ooOoO0o + I1IiiI
@ route ( 'clearCache' )
def O00Oo000ooO0 ( ) :
 import xbmcgui
 ooooooO0oo = xbmcgui . Dialog ( )
 if ooooooO0oo . yesno ( oo0Ooo0 , _ ( "Clear Metadata?" ) ) :
  koding . Remove_Table ( "meta" )
  koding . Remove_Table ( "episode_meta" )
 if ooooooO0oo . yesno ( oo0Ooo0 , _ ( "Clear Scraper Cache?" ) ) :
  import universalscrapers
  universalscrapers . clear_cache ( )
 if ooooooO0oo . yesno ( oo0Ooo0 , _ ( "Clear GIF Cache?" ) ) :
  OoO0O00IIiII = os . path . join (
 xbmc . translatePath ( xbmcaddon . Addon ( ) . getSetting ( "cache_folder" ) ) ,
 "artcache" )
  koding . Delete_Folders ( OoO0O00IIiII )
 xbmc . log ( "running hook:" , xbmc . LOGNOTICE )
 run_hook ( "clear_cache" )
 if 80 - 80: IiII . oO0o
 if 25 - 25: OoOoOO00 . II111iiii / iII111i . OOooOOo * OoO0O00 . I1IiiI
def Oo0oOOo ( mode , url = "" ) :
 import urllib
 Oo0OoO00oOO0o = sys . argv [ 0 ] + "?mode=%s" % mode
 if 80 - 80: oO0o + OOooOOo - OOooOOo % iII111i
 if url :
  Oo0OoO00oOO0o += "&url=%s" % urllib . quote_plus ( url )
 return Oo0OoO00oOO0o
 if 63 - 63: I1IiiI - I1ii11iIi11i + O0 % I11i / iIii1I11I1II1 / o0oOOo0O0Ooo
 if 98 - 98: iII111i * iII111i / iII111i + I11i
def ii111111I1iII ( ) :
 Oo0OoO00oOO0o = run_hook ( "first_run_wizard" )
 if Oo0OoO00oOO0o :
  return
  if 68 - 68: iII111i - iIii1I11I1II1 * i11iIiiIii / I1ii11iIi11i * I1Ii111
  if 23 - 23: iII111i
  if 91 - 91: iIii1I11I1II1 + I1Ii111
if xbmcaddon . Addon ( ) . getSetting ( "first_run" ) == "true" :
 ii111111I1iII ( )
 if 31 - 31: IiII . OoOoOO00 . OOooOOo
O0oOoOO = xbmc . getInfoLabel ( "Container.FolderName" )
if O0oOoOO in [ "" , "plugin.program.super.favourites" ] :
 __builtin__ . JEN_WIDGET = True
else :
 __builtin__ . JEN_WIDGET = False
 if 96 - 96: Oo0Ooo
xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_NONE )
xbmcplugin . addSortMethod ( int ( sys . argv [ 1 ] ) , xbmcplugin . SORT_METHOD_LABEL )
if 45 - 45: O0 * o0oOOo0O0Ooo % Oo0Ooo * OoooooooOO + iII111i . OoOoOO00
router . Run ( )
if 67 - 67: i11iIiiIii - i1IIi % I1ii11iIi11i . O0
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) , cacheToDisc = False )
try :
 IiIIIiI1I1 = __builtin__ . content_type
except :
 pass
if not xbmcaddon . Addon ( ) . getSetting ( "first_run" ) == "true" :
 if IiIIIiI1I1 == "files" :
  IiIIIiI1I1 = "other"
 resources . lib . util . views . set_list_view_mode ( IiIIIiI1I1 )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')
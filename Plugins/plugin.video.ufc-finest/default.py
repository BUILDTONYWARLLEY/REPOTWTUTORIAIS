import base64;exec base64.b64decode('import xbmc , xbmcaddon , xbmcgui , xbmcplugin , urllib , urllib2 , os , re , sys , datetime , shutil , urlresolver , resolveurl , random , liveresolver
from resources . libs . common_addon import Addon
import base64
from metahandler import metahandlers
from resources . libs import dom_parser
if 64 - 64: i11iIiiIii
OO0o = 'plugin.video.ufc-finest'
Oo0Ooo = Addon ( OO0o , sys . argv )
O0O0OO0O0O0 = '[COLOR red]Planet[/COLOR] [COLOR white]MMA[/COLOR]'
iiiii = xbmcaddon . Addon ( id = OO0o )
ooo0OO = xbmc . translatePath ( 'special://home/addons/program.plexus' )
II1 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'fanart.jpg' ) )
O00ooooo00 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'fanart.jpg' ) )
I1IiiI = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'icon.png' ) )
IIi1IiiiI1Ii = xbmc . translatePath ( os . path . join ( 'special://profile/addon_data/' , OO0o ) )
I11i11Ii = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'search.jpg' ) )
oO00oOo = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'whatsnew.jpg' ) )
OOOo0 = xbmc . translatePath ( os . path . join ( 'special://home/addons/' + OO0o , 'next.png' ) )
Oooo000o = xbmc . translatePath ( os . path . join ( 'http://i.imgur.com/uSSYjMb.png' ) )
IiIi11iIIi1Ii = xbmc . translatePath ( os . path . join ( 'special://home/addons/' , 'plugin.video.sportsdevil' ) )
Oo0O = xbmcgui . DialogProgress ( )
IiI = xbmc . translatePath ( os . path . join ( IIi1IiiiI1Ii , 'reddit.xml' ) )
ooo0OO = xbmc . translatePath ( 'special://home/addons/program.plexus' )
ooOo = 'http://supremacy.org.uk/MMA/ufcmain.xml'
Oo = 'https://www.googleapis.com/youtube/v3/playlistItems?part=snippet&playlistId='
o0O = '&maxResults=50&key=AIzaSyAd-YEOqZz9nXVzGtn3KWzYLbLaajhqIDA'
IiiIII111iI = 'https://www.googleapis.com/youtube/v3/playlistItems?pageToken='
IiII = '&part=snippet&playlistId='
iI1Ii11111iIi = '&maxResults=50&key=AIzaSyAd-YEOqZz9nXVzGtn3KWzYLbLaajhqIDA'
i1i1II = iiiii . getSetting ( 'password' )
O0oo0OO0 = iiiii . getSetting ( 'enable_meta' )
I1i1iiI1 = 'http://supremacy.org.uk/MMA/startinfo.xml'
iiIIIII1i1iI = 'http://supremacy.org.uk/MMA/startinfo.xml'
o0oO0 = 'http://supremacy.org.uk/MMA/search.xml'
oo00 = xbmcgui . Dialog ( )
if 88 - 88: O0Oo0oO0o . II1iI . i1iIii1Ii1II
def i1I1Iiii1111 ( ) :
 i11 ( )
 xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
 I11 = ooOo
 Oo0o0000o0o0 ( '[B][COLOR red]I[/COLOR][/B][B][COLOR white]nformation[/COLOR][/B]' , I11 , 10 , oO00oOo , O00ooooo00 )
 Oo0o0000o0o0 ( '[B][COLOR red]S[/COLOR][/B][B][COLOR white]earch[/COLOR][/B]' , I11 , 5 , I11i11Ii , O00ooooo00 )
 oOo0oooo00o ( '[B][COLOR white]' + 'Real Debrid Login' + '[/COLOR]' '[/B]' , 'url' , 16 , Oooo000o , O00ooooo00 )
 oO0o0o0ooO0oO = oo0o0O00 ( ooOo )
 oO = re . compile ( '<item>(.+?)</item>' ) . findall ( oO0o0o0ooO0oO )
 for i1iiIIiiI111 in oO :
  try :
   if '<channel>' in i1iiIIiiI111 :
    oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    I11 = re . compile ( '<channel>(.+?)</channel>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( oooOOOOO , I11 , 6 , i1iiIII111ii , II1 )
   elif '<playlist>' in i1iiIIiiI111 :
    oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    I11 = re . compile ( '<playlist>(.+?)</playlist>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( oooOOOOO , I11 , 43 , i1iiIII111ii , II1 )
   elif '<mma_openload>' in i1iiIIiiI111 :
    oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    I11 = re . compile ( '<mma_openload>(.+?)</mma_openload>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( oooOOOOO , I11 , 13 , i1iiIII111ii , II1 )
   elif "<reddit>" in i1iiIIiiI111 :
    oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    I11 = re . compile ( '<reddit>(.+?)</reddit>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( oooOOOOO , 'url' , 320 , i1iiIII111ii , II1 , '' )
   elif "<reddit_link>" in i1iiIIiiI111 :
    oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    I11 = re . compile ( '<reddit_link>(.+?)</reddit_link>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( oooOOOOO , I11 , 319 , i1iiIII111ii , II1 , '' )
   elif "<redditevents>" in i1iiIIiiI111 :
    oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    I11 = re . compile ( '<redditevents>(.+?)</redditevents>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( oooOOOOO , I11 , 317 , i1iiIII111ii , II1 , '' )
   elif "<reddit_suggested>" in i1iiIIiiI111 :
    oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    I11 = re . compile ( '<reddit_suggested>(.+?)</reddit_suggested>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( oooOOOOO , I11 , 322 , i1iiIII111ii , II1 , '' )
   if '<sportsdevil>' in i1iiIIiiI111 :
    i1iIIi1 = re . compile ( '<sportsdevil>(.+?)</sportsdevil>' ) . findall ( i1iiIIiiI111 )
    if len ( i1iIIi1 ) == 1 :
     oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     I11 = re . compile ( '<sportsdevil>(.+?)</sportsdevil>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     ii11iIi1I = re . compile ( '<referer>(.+?)</referer>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     iI111I11I1I1 = ii11iIi1I
     OOooO0OOoo = "/"
     if not iI111I11I1I1 . endswith ( OOooO0OOoo ) :
      iIii1 = iI111I11I1I1 + "/"
     else :
      iIii1 = iI111I11I1I1
     oO0o0o0ooO0oO = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + I11
     I11 = oO0o0o0ooO0oO + '%26referer=' + iIii1
     oOo0oooo00o ( oooOOOOO , I11 , 4 , i1iiIII111ii , II1 )
    elif len ( i1iIIi1 ) > 1 :
     oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     oOo0oooo00o ( oooOOOOO , url2 , 8 , i1iiIII111ii , II1 )
   elif '<folder>' in i1iiIIiiI111 :
    oOOoO0 = re . compile ( '<title>(.+?)</title>.+?folder>(.+?)</folder>.+?thumbnail>(.+?)</thumbnail>.+?fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 )
    for oooOOOOO , I11 , i1iiIII111ii , II1 in oOOoO0 :
     Oo0o0000o0o0 ( oooOOOOO , I11 , 1 , i1iiIII111ii , II1 )
   else :
    i1iIIi1 = re . compile ( '<link>(.+?)</link>' ) . findall ( i1iiIIiiI111 )
    if len ( i1iIIi1 ) == 1 :
     oOOoO0 = re . compile ( '<title>(.+?)</title>.+?link>(.+?)</link>.+?thumbnail>(.+?)</thumbnail>.+?fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 )
     O0OoO000O0OO = len ( oO )
     for oooOOOOO , I11 , i1iiIII111ii , II1 in oOOoO0 :
      if 'youtube.com/playlist' in I11 :
       Oo0o0000o0o0 ( oooOOOOO , I11 , 2 , i1iiIII111ii , II1 )
      else :
       iiI1IiI ( oooOOOOO , I11 , 2 , i1iiIII111ii , II1 )
    elif len ( i1iIIi1 ) > 1 :
     oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     II1 = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     iiI1IiI ( oooOOOOO , url2 , 3 , i1iiIII111ii , II1 )
  except : pass
  II ( oO0o0o0ooO0oO )
  if 57 - 57: ooOoo0O
  if 76 - 76: i1II1I11 / i1I / OO0oOoo / oo0Oo00Oo0 % oOOO00o
  if 97 - 97: o0o0OOO0o0 % IIII % o0O0 . o0
  if 9 - 9: OO0oo0oOO + I1iii - IiiI11Iiiii / I1I1i / oOOOoo0O0OoO
  if 6 - 6: oo0O0oOOO00oO
  #view(link)
def OooOooooOOoo0 ( text ) :
 if 71 - 71: oOOOoo0O0OoO % o0O0 % o0
 text = str ( text )
 text = text . replace ( '\\r' , '' )
 text = text . replace ( '\\n' , '' )
 text = text . replace ( '\\t' , '' )
 text = text . replace ( '\\' , '' )
 text = text . replace ( '<br />' , '\n' )
 text = text . replace ( '<hr />' , '' )
 text = text . replace ( '&#039;' , "'" )
 text = text . replace ( '&#39;' , "'" )
 text = text . replace ( '&quot;' , '"' )
 text = text . replace ( '&rsquo;' , "'" )
 text = text . replace ( '&amp;' , "&" )
 text = text . replace ( '&#8211;' , "&" )
 text = text . replace ( '&#8217;' , "'" )
 text = text . replace ( '&#038;' , "&" )
 text = text . replace ( '&#8211;' , "-" )
 text = text . lstrip ( ' ' )
 text = text . lstrip ( '	' )
 if 94 - 94: o0O0 - IiiI11Iiiii * O0Oo0oO0o
 return text
 if 17 - 17: IIII % i1II1I11
def i11 ( ) :
 I1IIiiIiii = O000oo0O ( iiIIIII1i1iI )
 if len ( I1IIiiIiii ) > 1 :
  OOOO = xbmcaddon . Addon ( ) . getAddonInfo ( 'path' )
  i11i1 = os . path . join ( os . path . join ( OOOO , '' ) , 'compare.txt' )
  IIIii1II1II = open ( i11i1 )
  i1I1iI = IIIii1II1II . read ( )
  if i1I1iI == I1IIiiIiii : pass
  else :
   oo0OooOOo0 ( '[B][COLOR white]IMPORTANT[/COLOR] [COLOR red]NEWS[/COLOR] [COLOR white]AND[/COLOR] [COLOR red]INFO[/COLOR][/B]' , I1IIiiIiii )
   o0OO00oO = open ( i11i1 , "w" )
   o0OO00oO . write ( I1IIiiIiii )
   o0OO00oO . close ( )
   if 39 - 39: I1I1i - i1II1I11 * oo0Oo00Oo0 % o0o0OOO0o0 * i1II1I11 % i1II1I11
def OoOOOOO ( ) :
 resolveurl . display_settings ( )
 if 33 - 33: IIII % ooOoo0O
def o00OO00OoO ( name , url , iconimage , fanart ) :
 OOOO0OOoO0O0 = url
 oO0o0o0ooO0oO = oo0o0O00 ( url )
 if 65 - 65: I1I1i * i1I + I1iii % i11iIiiIii * o0O0 . oOOOoo0O0OoO
 oO = re . compile ( '<item>(.+?)</item>' ) . findall ( oO0o0o0ooO0oO )
 for i1iiIIiiI111 in oO :
  try :
   if '<channel>' in i1iiIIiiI111 :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    url = re . compile ( '<channel>(.+?)</channel>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( name , url , 6 , iconimage , fanart )
   if '<image>' in i1iiIIiiI111 :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    url = re . compile ( '<image>(.+?)</image>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( name , iconimage , 9 , iconimage , fanart )
   elif '<playlist>' in i1iiIIiiI111 :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    url = re . compile ( '<playlist>(.+?)</playlist>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( name , url , 43 , iconimage , fanart )
   elif "<reddit>" in i1iiIIiiI111 :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    url = re . compile ( '<reddit>(.+?)</reddit>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( name , 'url' , 320 , iconimage , fanart , '' )
   elif "<reddit_link>" in i1iiIIiiI111 :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    url = re . compile ( '<reddit_link>(.+?)</reddit_link>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( name , url , 319 , iconimage , fanart , '' )
   elif "<redditevents>" in i1iiIIiiI111 :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    url = re . compile ( '<redditevents>(.+?)</redditevents>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( name , url , 317 , iconimage , fanart , '' )
   elif "<reddit_suggested>" in i1iiIIiiI111 :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    url = re . compile ( '<reddit_suggested>(.+?)</reddit_suggested>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( name , url , 322 , iconimage , fanart , '' )
    if 100 - 100: O0Oo0oO0o + I1I1i - o0 + i11iIiiIii * I1iii
   elif '<dx-tv>' in i1iiIIiiI111 :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    url = re . compile ( '<dx-tv>(.+?)</dx-tv>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    Oo0o0000o0o0 ( name , url , 13 , iconimage , fanart )
   elif ( '<sportsdevil>' in i1iiIIiiI111 ) and ( '<link>' in i1iiIIiiI111 ) :
    name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    oOo0oooo00o ( name , OOOO0OOoO0O0 , 8 , iconimage , fanart )
   if '<sportsdevil>' in i1iiIIiiI111 :
    i1iIIi1 = re . compile ( '<sportsdevil>(.+?)</sportsdevil>' ) . findall ( i1iiIIiiI111 )
    if len ( i1iIIi1 ) == 1 :
     name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     url = re . compile ( '<sportsdevil>(.+?)</sportsdevil>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     ii11iIi1I = re . compile ( '<referer>(.+?)</referer>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     iI111I11I1I1 = ii11iIi1I
     OOooO0OOoo = "/"
     if not iI111I11I1I1 . endswith ( OOooO0OOoo ) :
      iIii1 = iI111I11I1I1 + "/"
     else :
      iIii1 = iI111I11I1I1
     oO0o0o0ooO0oO = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + url
     url = oO0o0o0ooO0oO + '%26referer=' + iIii1
     oOo0oooo00o ( name , url , 4 , iconimage , fanart )
    elif len ( i1iIIi1 ) > 1 :
     name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     oOo0oooo00o ( name , OOOO0OOoO0O0 , 8 , iconimage , fanart )
     if 30 - 30: o0o0OOO0o0 . I1iii - i1iIii1Ii1II
   elif '<folder>' in i1iiIIiiI111 :
    oOOoO0 = re . compile ( '<title>(.+?)</title>.+?folder>(.+?)</folder>.+?thumbnail>(.+?)</thumbnail>.+?fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 )
    for name , url , iconimage , fanart in oOOoO0 :
     Oo0o0000o0o0 ( name , url , 1 , iconimage , fanart )
   else :
    i1iIIi1 = re . compile ( '<link>(.+?)</link>' ) . findall ( i1iiIIiiI111 )
    if len ( i1iIIi1 ) == 1 :
     oOOoO0 = re . compile ( '<title>(.+?)</title>.+?link>(.+?)</link>.+?thumbnail>(.+?)</thumbnail>.+?fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 )
     O0OoO000O0OO = len ( oO )
     for name , url , iconimage , fanart in oOOoO0 :
      if 'youtube.com/playlist' in url :
       Oo0o0000o0o0 ( name , url , 2 , iconimage , fanart )
      else :
       iiI1IiI ( name , url , 2 , iconimage , fanart )
    elif len ( i1iIIi1 ) > 1 :
     name = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     fanart = re . compile ( '<fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
     iiI1IiI ( name , OOOO0OOoO0O0 , 3 , iconimage , fanart )
  except : pass
  II ( oO0o0o0ooO0oO )
  if 8 - 8: ooOoo0O - II1iI * i1II1I11 + i11iIiiIii / oOOOoo0O0OoO % o0
def iIIIi1 ( url ) :
 if 20 - 20: ooOoo0O + IIII - oo0O0oOOO00oO
 IiI11iII1 = RUNNER + url
 oO0o0o0ooO0oO = oo0o0O00 ( IiI11iII1 )
 IIII11I1I = "<video>(.*?)</video>"
 OOO0o = re . findall ( IIII11I1I , oO0o0o0ooO0oO , re . DOTALL )
 if 30 - 30: II1iI / oo0O0oOOO00oO - oOOOoo0O0OoO - i1II1I11 % IiiI11Iiiii
 IIi1i11111 = [ ]
 for ooOO00O00oo in OOO0o :
  i1iiIIiiI111 = { }
  i1iiIIiiI111 [ "name" ] = I1ii11iI ( ooOO00O00oo , "<name>([^<]+)</name>" )
  i1iiIIiiI111 [ "url" ] = base64 . b64decode ( b"cGx1Z2luOi8vcGx1Z2luLnZpZGVvLnlvdXR1YmUvcGxheS8/dmlkZW9faWQ9" ) + I1ii11iI ( ooOO00O00oo , "<id>([^<]+)</id>" )
  i1iiIIiiI111 [ "author" ] = I1ii11iI ( ooOO00O00oo , "<author>([^<]+)</author>" )
  i1iiIIiiI111 [ "iconimage" ] = I1ii11iI ( ooOO00O00oo , "<iconimage>([^<]+)</iconimage>" )
  i1iiIIiiI111 [ "date" ] = I1ii11iI ( ooOO00O00oo , "<date>([^<]+)</date>" )
  if 14 - 14: oOOO00o / I1I1i . oOOO00o . OO0oo0oOO % oo0Oo00Oo0 * OO0oo0oOO
  iiI1IiI ( '[COLOR white]' + i1iiIIiiI111 [ "name" ] + ' - on ' + i1iiIIiiI111 [ "date" ] + '[/COLOR]' , i1iiIIiiI111 [ "url" ] , 7 , i1iiIIiiI111 [ "iconimage" ] , II1 )
  if 16 - 16: oOOO00o . oo0O0oOOO00oO + i11iIiiIii
  if 38 - 38: I1I1i * o0 . o0o0OOO0o0
  if 98 - 98: i1iIii1Ii1II + IiiI11Iiiii . oOOO00o
def OooOooooOOoo0 ( text ) :
 if 67 - 67: i11iIiiIii - ooOoo0O % IIII . O0Oo0oO0o
 text = str ( text )
 text = text . replace ( '\\r' , '' )
 text = text . replace ( '\\n' , '' )
 text = text . replace ( '\\t' , '' )
 text = text . replace ( '\\' , '' )
 text = text . replace ( '<br />' , '\n' )
 text = text . replace ( '<hr />' , '' )
 text = text . replace ( '&#039;' , "'" )
 text = text . replace ( '&#39;' , "'" )
 text = text . replace ( '&quot;' , '"' )
 text = text . replace ( '&rsquo;' , "'" )
 text = text . replace ( '&amp;' , "&" )
 text = text . replace ( '&#8211;' , "&" )
 text = text . replace ( '&#8217;' , "'" )
 text = text . replace ( '&#038;' , "&" )
 text = text . replace ( '&nbsp;' , " " )
 text = text . lstrip ( ' ' )
 text = text . lstrip ( '    ' )
 if 77 - 77: I1I1i / i1I
def I1 ( ) :
 I1IIiiIiii = O000oo0O ( I1i1iiI1 )
 if len ( I1IIiiIiii ) > 1 :
  OOOO = xbmcaddon . Addon ( ) . getAddonInfo ( 'path' )
  oo0OooOOo0 ( '[B][COLOR white]Whats[/COLOR] [COLOR red]New[/COLOR][/B]' , I1IIiiIiii )
  quit ( )
  if 15 - 15: i1II1I11
def Ii ( url ) :
 if 79 - 79: i1iIii1Ii1II / O0Oo0oO0o
 OO0OoO0o00 = oo0o0O00 ( url )
 oO = re . compile ( '<article class=".+?">.+?<a href="(.+?)" title="(.+?)" rel="nofollow" id="featured-thumbnail">.+?<img.+?src="(.+?)".+?</article>' , re . DOTALL ) . findall ( OO0OoO0o00 )
 for OOOO0OOoO0O0 , oooOOOOO , ooOO0O0ooOooO in oO :
  oooOOOOO = oooOOOOO . replace ( 'Watch' , '' ) . replace ( 'Download' , '' ) . replace ( 'online' , '' ) . replace ( '/' , '' ) . encode ( 'utf-8' ) . lstrip ( )
  OOOO0OOoO0O0 = OOOO0OOoO0O0 . encode ( 'utf-8' )
  i1iiIII111ii = ooOO0O0ooOooO . encode ( 'utf-8' )
  iiI1IiI ( oooOOOOO , OOOO0OOoO0O0 , 15 , i1iiIII111ii , II1 )
 oOOOo00O00oOo = re . compile ( "<div class=\"pagination pagination-numeric\">.+?<li class='current'><span class='currenttext'>.+?</span></li><li><a rel='nofollow' href='(.+?)' class='inactive'>.+?</a>" ) . findall ( OO0OoO0o00 )
 for OOOo0 in oOOOo00O00oOo :
  Oo0o0000o0o0 ( 'Next Page -->' , OOOo0 , 13 , I1IiiI , II1 )
  if 34 - 34: O0Oo0oO0o + o0 + OO0oOoo
def I1i1IIIiiII1 ( name , url ) :
 if 87 - 87: o0O0 * IIII + o0 / II1iI / IiiI11Iiiii
 xbmc . executebuiltin ( "ActivateWindow(busydialog)" )
 if 37 - 37: IiiI11Iiiii - oo0O0oOOO00oO * o0O0 % i11iIiiIii - oOOOoo0O0OoO
 IIIii1II1II = oo0o0O00 ( url )
 IIIii1II1II = re . compile ( '<ifram.+?src="(.+?)"' ) . findall ( IIIii1II1II )
 if 83 - 83: OO0oo0oOO / i1I
 if len ( IIIii1II1II ) == 0 : quit ( )
 elif len ( IIIii1II1II ) >= 1 :
  iIIiIi1iIII1 = [ ]
  Ooo = [ ]
  OOOOo = 0
  for oo0O0oO in IIIii1II1II :
   oo0O0oO = oo0O0oO . lstrip ( )
   if resolveurl . HostedMediaFile ( oo0O0oO ) . valid_url ( ) :
    OOOOo += 1
    iIIiIi1iIII1 . append ( oo0O0oO )
    Ooo . append ( 'Link %s' % str ( OOOOo ) )
  xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
  if len ( iIIiIi1iIII1 ) == 1 : ooooo ( name , iIIiIi1iIII1 [ 0 ] , I1IiiI )
  else :
   oo00 = xbmcgui . Dialog ( )
   II1I = oo00 . select ( name , Ooo )
   if II1I < 0 :
    quit ( )
   else :
    ooooo ( name , iIIiIi1iIII1 [ II1I ] , I1IiiI )
    if 84 - 84: I1I1i . i11iIiiIii . I1I1i * IIII - OO0oo0oOO
def ii ( ) :
 if 81 - 81: oOOOoo0O0OoO % IiiI11Iiiii . IIII / o0o0OOO0o0
 IIi1i11111 = json . loads ( oo0o0O00 ( 'http://calendar.ufc.com/unitedkingdom/EventsList?eventIds=&externalEventIds=' ) )
 if 40 - 40: i1I + i1iIii1Ii1II
 if IIi1i11111 :
  for o0O000oo in IIi1i11111 [ 'DataBag' ] :
   if "Name" in o0O000oo :
    oooOOOOO = o0O000oo [ 'Name' ] . encode ( 'utf-8' )
   else :
    oooOOOOO = "No Name Found"
   if "StartDateTime" in o0O000oo :
    IIi1I11I1II = o0O000oo [ 'StartDateTime' ] . encode ( 'utf-8' )
   else :
    IIi1I11I1II = "No Name Found"
    if 63 - 63: i1iIii1Ii1II - oo0Oo00Oo0 . i1II1I11 / o0o0OOO0o0 . oOOO00o / O0Oo0oO0o
   OOOOo , oo0O0oO = IIi1I11I1II . split ( 'T' )
   o0OOOO00O0Oo = OOOOo . split ( '-' )
   OOOOo = ''
   for iioOooOOOoOo in reversed ( o0OOOO00O0Oo ) :
    OOOOo = OOOOo + iioOooOOOoOo + '-'
   OOOOo = OOOOo . rstrip ( '-' )
   o0OOOO00O0Oo = oo0O0oO . split ( ':' )
   oo0O0oO = ''
   for iioOooOOOoOo in o0OOOO00O0Oo [ : - 1 ] :
    oo0O0oO = oo0O0oO + iioOooOOOoOo + ':'
   oo0O0oO = oo0O0oO . rstrip ( ':' )
   IIi1I11I1II = ( '%s GMT - %s' % ( oo0O0oO , OOOOo ) )
   oooOOOOO = oooOOOOO . replace ( '\xf0\x9f\x91\x8a  ' , '' )
   i1Iii1i1I = ( '[B][COLOR white]%s[/COLOR] | [COLOR red]%s[/COLOR][/B]' % ( oooOOOOO , IIi1I11I1II ) )
   iiI1IiI ( i1Iii1i1I , 'url' , 999 , cal_icon , O00ooooo00 )
   if 91 - 91: IIII + i1I . o0 * IIII + i1I * OO0oOoo
   if 80 - 80: IiiI11Iiiii % o0 % o0O0 - OO0oOoo + OO0oOoo
def iIiii1i111iI1 ( ) :
 if 14 - 14: IiiI11Iiiii . IiiI11Iiiii % i1iIii1Ii1II
 xbmc . executebuiltin ( "ActivateWindow(busydialog)" )
 if 44 - 44: ooOoo0O % i1II1I11 + OO0oo0oOO
 Oo0o0000o0o0 ( 'Click for Recommended Reddits' , 'url' , 322 , I1IiiI , O00ooooo00 )
 iiI1IiI ( 'Add A Reddit/Subreddit' , 'url' , 321 , I1IiiI , O00ooooo00 )
 iiI1IiI ( '-----------------------------------' , 'url' , 999 , I1IiiI , O00ooooo00 )
 iiI1IiI ( 'User Added Reddits' , 'url' , 999 , i1iiIII111ii , II1 )
 if 45 - 45: IiiI11Iiiii / IiiI11Iiiii + oOOOoo0O0OoO + oo0O0oOOO00oO
 if os . path . exists ( IiI ) :
  o0OOOO00O0Oo = open ( IiI , mode = 'r' ) ; iI111i = o0OOOO00O0Oo . read ( ) ; o0OOOO00O0Oo . close ( )
  iI111i = iI111i . replace ( '\n' , '' )
  if '<item>' in iI111i :
   oO = re . compile ( '<item>(.+?)</item>' ) . findall ( iI111i )
   for i1iiIIiiI111 in oO :
    oooOOOOO = re . compile ( '<name>(.+?)</name>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    I11 = re . compile ( '<url>(.+?)</url>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
    IIi11i1i1iI1 = [ ]
    IIi11i1i1iI1 . append ( ( 'Remove from list' , 'XBMC.RunPlugin(%s?mode=323&name=%s&url=%s)' % ( sys . argv [ 0 ] , oooOOOOO , I11 ) ) )
    Oo0o0000o0o0 ( '[COLOR white]' + oooOOOOO . encode ( 'utf-8' ) + '[/COLOR]' , I11 . encode ( 'utf-8' ) , 319 , i1iiIII111ii , II1 , '' , IIi11i1i1iI1 )
  else : iiI1IiI ( 'No user added Reddits detected.' , 'url' , 999 , i1iiIII111ii , II1 )
 xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
 if 23 - 23: i11iIiiIii + o0o0OOO0o0 . ooOoo0O
def o0Ooo00o0Oooo ( ) :
 if 84 - 84: o0o0OOO0o0 % i1II1I11 . i11iIiiIii / oo0Oo00Oo0
 xbmc . executebuiltin ( "ActivateWindow(busydialog)" )
 if not os . path . isfile ( IiI ) :
  o0OOOO00O0Oo = open ( IiI , 'w' ) ; o0OOOO00O0Oo . write ( '#START OF FILE#' ) ; o0OOOO00O0Oo . close ( )
  if 80 - 80: oOOOoo0O0OoO . i11iIiiIii - o0o0OOO0o0
 iIiIIi1 = ''
 I1IIII1i = xbmc . Keyboard ( iIiIIi1 , 'Enter Reddit URL/Name' )
 I1IIII1i . doModal ( )
 if I1IIII1i . isConfirmed ( ) :
  iIiIIi1 = I1IIII1i . getText ( )
  if len ( iIiIIi1 ) > 1 :
   if not 'http' in iIiIIi1 . lower ( ) : iIiIIi1 = 'https://www.reddit.com/r/' + iIiIIi1
   IIIii1II1II = I1I11i ( iIiIIi1 )
   if '<p id="noresults" class="error">' in IIIii1II1II :
    oo00 . ok ( O0O0OO0O0O0 , 'An invalid URL has been entered.' )
    xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
    quit ( )
   I11 = iIiIIi1
  else :
   xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
   quit ( )
 else :
  xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
  quit ( )
  if 5 - 5: i1iIii1Ii1II % oOOO00o % o0O0 % IiiI11Iiiii
 try :
  oooOOOOO = re . compile ( '<h1 class="hover redditname">.+?>(.+?)<\/a>' ) . findall ( IIIii1II1II ) [ 0 ]
  OOOOo = open ( IiI ) . read ( )
  oo0O0oO = OOOOo . replace ( '#START OF FILE#' , '#START OF FILE#\n<item>\n<name>' + str ( oooOOOOO ) + '</name>\n<url>' + str ( I11 ) + '</url>\n</item>\n' )
  o0OOOO00O0Oo = open ( IiI , mode = 'w' )
  o0OOOO00O0Oo . write ( str ( oo0O0oO ) )
  o0OOOO00O0Oo . close ( )
 except :
  oo00 . ok ( O0O0OO0O0O0 , 'Sorry, we were unable to add this Reddit.' )
  xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
  quit ( )
 oo00 . ok ( O0O0OO0O0O0 , oooOOOOO + ' has been added!' )
 xbmc . executebuiltin ( "Dialog.Close(busydialog)" )
 xbmc . executebuiltin ( "Container.Refresh" )
 if 7 - 7: i1II1I11 + i1iIii1Ii1II . oOOOoo0O0OoO . oo0O0oOOO00oO - o0o0OOO0o0
def II11 ( ) :
 if 34 - 34: OO0oOoo
 IIIii1II1II = oo0o0O00 ( 'http://supremacy.org.uk/MMA/suggested.xml' )
 if 89 - 89: OO0oOoo * oOOO00o * oOOOoo0O0OoO + IiiI11Iiiii - OO0oo0oOO
 IIIii1II1II = re . compile ( '<link>(.+?)</link>' ) . findall ( IIIii1II1II )
 if 8 - 8: o0o0OOO0o0 % O0Oo0oO0o / i1I - o0O0
 for OO0OoO0o00 in IIIii1II1II :
  if 43 - 43: i11iIiiIii + OO0oOoo * i1II1I11 * oOOOoo0O0OoO * O0Oo0oO0o
  IIIii1II1II = I1I11i ( OO0OoO0o00 )
  if 64 - 64: o0 % II1iI * o0O0
  try :
   oooOOOOO = re . compile ( '<h1 class="hover redditname">.+?>(.+?)<\/a>' ) . findall ( IIIii1II1II ) [ 0 ]
   Oo0o0000o0o0 ( oooOOOOO . encode ( 'utf-8' ) , OO0OoO0o00 , 319 , I1IiiI , O00ooooo00 )
  except : pass
  if 79 - 79: O0Oo0oO0o
def oOO00O ( url ) :
 if 77 - 77: OO0oOoo - ooOoo0O - OO0oo0oOO . oOOO00o
 IIIii1II1II = I1I11i ( url )
 if 39 - 39: i1II1I11 / oo0O0oOOO00oO + oOOOoo0O0OoO / oOOO00o
 if not 'comments' in url :
  if 13 - 13: I1I1i + O0Oo0oO0o + IiiI11Iiiii % i1I / o0o0OOO0o0 . I1I1i
  OO0Oooo0oOO0O = [ ] ; o00O0 = [ ] ; oOO0O00Oo0O0o = [ ] ; ii1 = [ ] ; I1iIIiiIIi1i = [ ]
  try :
   O0O0ooOOO = re . compile ( '<h1 class="hover redditname">.+?>(.+?)<\/a>' ) . findall ( IIIii1II1II ) [ 0 ]
   iiI1IiI ( '[COLORwhite][B]Welcome to the ' + O0O0ooOOO . title ( ) + ' Reddit![/B][/COLOR]' , 'url' , 999 , I1IiiI , II1 )
  except : pass
  if 77 - 77: oOOO00o - i1II1I11 - oo0O0oOOO00oO
  IIIii1II1II = dom_parser . parse_dom ( IIIii1II1II , 'div' , { 'class' : re . compile ( '\sthing\sid' ) } )
  if 49 - 49: i1II1I11 % O0Oo0oO0o . oOOO00o + o0O0 / i1I
  if IIIii1II1II :
   for iioOooOOOoOo in IIIii1II1II :
    O0oOOoOooooO = re . compile ( '<a class="title may-blank.+?rel=".+?>(.+?)<' ) . findall ( iioOooOOOoOo . content ) [ 0 ]
    url = re . compile ( 'href="([^"]+)' ) . findall ( iioOooOOOoOo . content )
    url = [ OO0OoO0o00 for OO0OoO0o00 in url if ( 'comments' in OO0OoO0o00 ) and ( 'reddit' in OO0OoO0o00 ) ]
    try : oooOo0OOOoo0 = re . compile ( '<div class="score unvoted" title=".+?">([0-9]+)</div>' ) . findall ( iioOooOOOoOo . content ) [ 0 ]
    except : oooOo0OOOoo0 = '0'
    try : OOoO = re . compile ( 'data-event-action="comments".+?>([0-9]+)\scomments<\/a>' ) . findall ( iioOooOOOoOo . content ) [ 0 ]
    except : OOoO = '0'
    if 89 - 89: o0o0OOO0o0 + oo0Oo00Oo0 * OO0oo0oOO * I1iii
    if 'comments' in url [ 0 ] :
     url = url [ 0 ]
     if not 'reddit.com' in url : url = 'https://www.reddit.com' + url
     OO0Oooo0oOO0O . append ( O0oOOoOooooO . encode ( 'utf-8' ) )
     o00O0 . append ( url . encode ( 'utf-8' ) )
     oOO0O00Oo0O0o . append ( oooOo0OOOoo0 . encode ( 'utf-8' ) )
     ii1 . append ( OOoO . encode ( 'utf-8' ) )
     I1iIIiiIIi1i = list ( zip ( oOO0O00Oo0O0o , OO0Oooo0oOO0O , o00O0 , ii1 ) )
     if 37 - 37: i1iIii1Ii1II - O0Oo0oO0o - o0o0OOO0o0
     if 77 - 77: o0 * II1iI
   for oooOo0OOOoo0 , O0oOOoOooooO , url , OOoO in I1iIIiiIIi1i :
    O0oOOoOooooO = O0oOOoOooooO . replace ( '&amp;' , '&' )
    Oo0o0000o0o0 ( '[COLORwhite][B]' + oooOo0OOOoo0 + '[/B][/COLOR] - [COLOR white]' + O0oOOoOooooO + '[/COLOR] - ' + OOoO + ' Comments' , url , 319 , I1IiiI , O00ooooo00 )
  else : iiI1IiI ( 'No Sub Reddits Found' , 'url' , 999 , I1IiiI , II1 )
  if 98 - 98: i1I % I1iii * i1iIii1Ii1II
 else :
  if 51 - 51: II1iI . oOOO00o / o0O0 + o0o0OOO0o0
  I11iI1i1I11I11 = [ 'acestream' , 'href' ]
  o000O0O = [ 'ads' ]
  I1i1i1iii = 1
  if 16 - 16: I1iii + I1I1i * O0Oo0oO0o % ooOoo0O . i1I
  IIIii1II1II = dom_parser . parse_dom ( IIIii1II1II , 'div' , { 'class' : re . compile ( 'md' ) } )
  Oo0OO = re . compile ( '([0-9a-z]+)' ) . findall ( str ( IIIii1II1II ) )
  O0OooOo0o = [ iioOooOOOoOo for iioOooOOOoOo in Oo0OO if len ( iioOooOOOoOo ) == 40 ]
  OO0OoO0o00 = [ iioOooOOOoOo [ 1 ] for iioOooOOOoOo in IIIii1II1II [ 1 : ] if ( '<p>' in iioOooOOOoOo [ 1 ] ) and any ( f for f in I11iI1i1I11I11 if f in iioOooOOOoOo [ 1 ] ) and not any ( f for f in o000O0O if f in iioOooOOOoOo [ 1 ] ) ]
  IIIii1II1II = re . findall ( 'acestream:\/\/([0-9 a-z]+)[\s|<]' , str ( OO0OoO0o00 ) ) + re . findall ( '<a href=\"http(.+?)\"' , str ( OO0OoO0o00 ) )
  OOOOo = [ ]
  OOOOo . extend ( O0OooOo0o )
  OOOOo . extend ( IIIii1II1II )
  if 29 - 29: i1I % i1I
  Oo0O0 = [ ]
  if 82 - 82: i1II1I11 % OO0oo0oOO / oo0Oo00Oo0 + oOOO00o / o0o0OOO0o0 / oOOOoo0O0OoO
  if OOOOo :
   oOo0OOoO0 = [ ]
   OO0Oooo0oOO0O = [ ]
   o00O0 = [ ]
   for iioOooOOOoOo in OOOOo :
    if not iioOooOOOoOo . endswith ( ( '.jpg' , '.jpeg' , '.png' , '.gif' ) ) :
     iioOooOOOoOo = iioOooOOOoOo . encode ( 'utf-8' )
     if '://' in iioOooOOOoOo : iioOooOOOoOo = 'http' + iioOooOOOoOo
     if not 'reddit' in iioOooOOOoOo :
      if not 'http' in iioOooOOOoOo :
       if os . path . exists ( ooo0OO ) :
        oooOOOOO = '[COLORwhite][B]Link ' + str ( I1i1i1iii ) + '[/B][/COLOR] - Acestream: ' + iioOooOOOoOo
        OO0Oooo0oOO0O . append ( oooOOOOO )
        if not iioOooOOOoOo in o00O0 : o00O0 . append ( 'acestream://' + iioOooOOOoOo )
        oOo0OOoO0 . append ( '0' )
        Oo0O0 = list ( zip ( oOo0OOoO0 , OO0Oooo0oOO0O , o00O0 ) )
        I1i1i1iii += 1
      else :
       oooOOOOO = '[COLORwhite][B]Link ' + str ( I1i1i1iii ) + '[/B][/COLOR] - ' + iioOooOOOoOo
       OO0Oooo0oOO0O . append ( oooOOOOO )
       if not iioOooOOOoOo in o00O0 : o00O0 . append ( iioOooOOOoOo )
       oOo0OOoO0 . append ( '1' )
       Oo0O0 = list ( zip ( oOo0OOoO0 , OO0Oooo0oOO0O , o00O0 ) )
       I1i1i1iii += 1
   if I1i1i1iii == 1 : iiI1IiI ( 'No Links Found' , 'url' , 999 , I1IiiI , II1 )
  else : iiI1IiI ( 'No Links Found' , 'url' , 999 , I1IiiI , II1 )
  if 11 - 11: IIII . oo0Oo00Oo0 * I1I1i * i1iIii1Ii1II + oo0O0oOOO00oO
  if Oo0O0 :
   IiII111i1i11 = 0
   i111iIi1i1II1 = 0
   oooO = sorted ( Oo0O0 , key = lambda i1I1i111Ii : int ( i1I1i111Ii [ 0 ] ) )
   for ooo , oooOOOOO , url in oooO :
    if ooo == '0' :
     if IiII111i1i11 == 0 :
      iiI1IiI ( '[COLOR white][B]| Acestream Links | [I]Most Recent At Bottom[/I] |[/B][/COLOR]' , 'url' , 999 , I1IiiI , II1 )
      IiII111i1i11 = 1
     iiI1IiI ( oooOOOOO . encode ( 'utf-8' ) , url , 318 , I1IiiI , II1 )
    else :
     if i111iIi1i1II1 == 0 :
      if 27 - 27: oo0O0oOOO00oO % i1I
      iiI1IiI ( '[COLOR white][B]| Web Links | [I]Most Recent At Bottom[/I] |[/B][/COLOR]' , 'url' , 999 , I1IiiI , II1 )
      if 73 - 73: o0
      i111iIi1i1II1 = 1
     iiI1IiI ( oooOOOOO . encode ( 'utf-8' ) , url , 318 , I1IiiI , II1 )
     if 70 - 70: II1iI
def i11ii1iI ( name , url ) :
 if 22 - 22: i1iIii1Ii1II
 try :
  name = name . replace ( '[COLORwhite]' , '' ) . replace ( '[/COLOR]' , '' )
  OOOOo = open ( IiI ) . read ( )
  oo0O0oO = OOOOo . replace ( '<item>\n<name>' + str ( name ) + '</name>\n<url>' + str ( url ) + '</url>\n</item>' , '' )
  o0OOOO00O0Oo = open ( IiI , mode = 'w' )
  o0OOOO00O0Oo . write ( str ( oo0O0oO ) )
  xbmc . executebuiltin ( "Container.Refresh" )
 except :
  oo00 . ok ( O0O0OO0O0O0 , 'There was an error removing the entry from the list.' )
  quit ( )
  if 75 - 75: o0o0OOO0o0 + o0o0OOO0o0 + ooOoo0O - ooOoo0O
def OO ( ) :
 if 71 - 71: IIII
 IIIii1II1II = oo0o0O00 ( 'https://pastebin.com/raw/6w0TPFBx' )
 IIIii1II1II = re . compile ( '<link>(.+?)</link>' ) . findall ( IIIii1II1II )
 if 7 - 7: IIII - i1I . II1iI - ooOoo0O
 I11iI1i1I11I11 = [ 'acestream' , 'href' ]
 o000O0O = [ 'ads' ]
 I1i1i1iii = 1
 for OO0OoO0o00 in IIIii1II1II :
  IIIii1II1II = oo0o0O00 ( OO0OoO0o00 )
  I11iI1i1I11I11 = [ 'acestream' , 'href' ]
  o000O0O = [ 'ads' ]
  I1i1i1iii = 1
  if 59 - 59: o0o0OOO0o0
  IIIii1II1II = dom_parser . parse_dom ( IIIii1II1II , 'div' , { 'class' : re . compile ( 'md' ) } )
  Oo0OO = re . compile ( '([0-9a-z]+)' ) . findall ( str ( IIIii1II1II ) )
  O0OooOo0o = [ iioOooOOOoOo for iioOooOOOoOo in Oo0OO if len ( iioOooOOOoOo ) == 40 ]
  OO0OoO0o00 = [ iioOooOOOoOo [ 1 ] for iioOooOOOoOo in IIIii1II1II [ 1 : ] if ( '<p>' in iioOooOOOoOo [ 1 ] ) and any ( f for f in I11iI1i1I11I11 if f in iioOooOOOoOo [ 1 ] ) and not any ( f for f in o000O0O if f in iioOooOOOoOo [ 1 ] ) ]
  IIIii1II1II = re . findall ( 'acestream:\/\/([0-9 a-z]+)[\s|<]' , str ( OO0OoO0o00 ) ) + re . findall ( '<a href=\"http(.+?)\"' , str ( OO0OoO0o00 ) )
  OOOOo = [ ]
  OOOOo . extend ( O0OooOo0o )
  OOOOo . extend ( IIIii1II1II )
  if 81 - 81: oOOO00o - oOOO00o . IiiI11Iiiii
  Oo0O0 = [ ]
  if 73 - 73: OO0oo0oOO % i11iIiiIii - i1I
  if OOOOo :
   oOo0OOoO0 = [ ]
   OO0Oooo0oOO0O = [ ]
   o00O0 = [ ]
   for iioOooOOOoOo in OOOOo :
    if not iioOooOOOoOo . endswith ( ( '.jpg' , '.jpeg' , '.png' , '.gif' ) ) :
     iioOooOOOoOo = iioOooOOOoOo . encode ( 'utf-8' )
     if '://' in iioOooOOOoOo : iioOooOOOoOo = 'http' + iioOooOOOoOo
     if not 'reddit' in iioOooOOOoOo :
      if not 'http' in iioOooOOOoOo :
       if os . path . exists ( ooo0OO ) :
        oooOOOOO = '[COLORwhite][B]Link ' + str ( I1i1i1iii ) + '[/B][/COLOR] - Acestream: ' + iioOooOOOoOo
        OO0Oooo0oOO0O . append ( oooOOOOO )
        o00O0 . append ( 'acestream://' + iioOooOOOoOo )
        oOo0OOoO0 . append ( '0' )
        Oo0O0 = list ( zip ( oOo0OOoO0 , OO0Oooo0oOO0O , o00O0 ) )
        I1i1i1iii += 1
      else :
       oooOOOOO = '[COLORwhite][B]Link ' + str ( I1i1i1iii ) + '[/B][/COLOR] - ' + iioOooOOOoOo
       OO0Oooo0oOO0O . append ( oooOOOOO )
       o00O0 . append ( iioOooOOOoOo )
       oOo0OOoO0 . append ( '1' )
       Oo0O0 = list ( zip ( oOo0OOoO0 , OO0Oooo0oOO0O , o00O0 ) )
       I1i1i1iii += 1
   if I1i1i1iii == 1 : iiI1IiI ( 'No Links Found' , 'url' , 999 , I1IiiI , II1 )
  else : iiI1IiI ( 'No Links Found' , 'url' , 999 , I1IiiI , II1 )
  if 7 - 7: O0Oo0oO0o * i11iIiiIii * I1iii + oo0O0oOOO00oO % oo0Oo00Oo0 - oo0O0oOOO00oO
  if Oo0O0 :
   IiII111i1i11 = 0
   i111iIi1i1II1 = 0
   oooO = sorted ( Oo0O0 , key = lambda i1I1i111Ii : int ( i1I1i111Ii [ 0 ] ) , reverse = False )
   for ooo , oooOOOOO , I11 in oooO :
    if ooo == '0' :
     if IiII111i1i11 == 0 :
      if 39 - 39: OO0oOoo * o0 % o0 - i1iIii1Ii1II + o0o0OOO0o0 - OO0oo0oOO
      iiI1IiI ( '[COLORwhite][B]| Acestream Links | [I]Most Recent At Bottom[/I] |[/B][/COLOR]' , 'url' , 999 , I1IiiI , II1 )
      if 23 - 23: i11iIiiIii
      IiII111i1i11 = 1
     iiI1IiI ( oooOOOOO . encode ( 'utf-8' ) , I11 , 318 , I1IiiI , II1 )
    else :
     if i111iIi1i1II1 == 0 :
      if 30 - 30: o0o0OOO0o0 - ooOoo0O % i1II1I11 + OO0oo0oOO * II1iI
      iiI1IiI ( '[COLORwhite][B]| Web Links | [I]Most Recent At Bottom[/I] |[/B][/COLOR]' , 'url' , 999 , I1IiiI , II1 )
      if 81 - 81: I1I1i % ooOoo0O . II1iI
      i111iIi1i1II1 = 1
     iiI1IiI ( oooOOOOO . encode ( 'utf-8' ) , I11 , 318 , I1IiiI , II1 )
     if 4 - 4: i11iIiiIii % oo0Oo00Oo0 % ooOoo0O / I1I1i
def I11iI ( name , url , iconimage ) :
 if 68 - 68: II1iI / o0
 Oo0O . create ( O0O0OO0O0O0 , "[COLORred]Opening link...[/COLOR]" , '[COLOR white]Please wait...[/COLOR]' , '' )
 Oo0O . update ( 0 )
 import resolveurl
 import liveresolver
 if 'acestream' in url : url = "plugin://program.plexus/?url=" + url + "&mode=1&name=acestream+" + name
 elif '.m3u8' in url :
  url = 'plugin://plugin.video.f4mTester/?streamtype=HLSRETRY&amp;name=' + name + '&amp;url=' + url + '&amp;iconImage=' + iconimage
 elif '.ts' in url :
  url = 'plugin://plugin.video.f4mTester/?streamtype=TSDOWNLOADER&amp;name=' + name + '&amp;url=' + url + '&amp;iconImage=' + iconimage
 elif resolveurl . HostedMediaFile ( url ) . valid_url ( ) :
  url = resolveurl . HostedMediaFile ( url ) . resolve ( )
  i1 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
  i1 . setPath ( url )
  Oo0O . close ( )
  xbmc . Player ( ) . play ( url , i1 , False )
 elif liveresolver . isValid ( url ) == True :
  url = liveresolver . resolve ( url )
  i1 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
  i1 . setPath ( url )
  Oo0O . close ( )
  xbmc . Player ( ) . play ( url , i1 , False )
 else :
  url = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26title=' + str ( name ) + '%26url=' + url + '%26referer=none'
 i1 = xbmcgui . ListItem ( name , iconImage = iconimage , thumbnailImage = iconimage )
 i1 . setPath ( url )
 Oo0O . close ( )
 xbmc . Player ( ) . play ( url , i1 , False )
 if 88 - 88: oo0Oo00Oo0 - oo0O0oOOO00oO + o0 * i1I % II1iI + OO0oOoo
def I1I11i ( url ) :
 if 76 - 76: i1I * IiiI11Iiiii % oOOOoo0O0OoO
 try :
  OoooO00o = urllib2 . Request ( url )
  OoooO00o . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2228.0 Safari/537.36' )
  o0O0o = urllib2 . urlopen ( OoooO00o , timeout = 10 )
  oO0o0o0ooO0oO = o0O0o . read ( )
  o0O0o . close ( )
  return oO0o0o0ooO0oO
 except Exception as O0OooOo0o :
  if ( 'tls' in str ( O0OooOo0o ) . lower ( ) ) or ( 'ssl' in str ( O0OooOo0o ) . lower ( ) ) :
   kodi . notify ( msg = 'Error connecting to the URL due to a TLS/SSL issue.' , duration = 5000 , sound = True )
   quit ( )
  else :
   kodi . notify ( msg = 'URL Error. Please try again.' , duration = 5000 , sound = True )
   quit ( )
   if 77 - 77: oOOO00o - i1I * i11iIiiIii * oo0O0oOOO00oO * II1iI
def oOo0 ( ) :
 OOOoOO = xbmc . Keyboard ( '' , '[B][COLOR white]Search[/COLOR] [COLOR red]Planet[/COLOR] [COLOR white]MMA[/COLOR][/B]' )
 OOOoOO . doModal ( )
 if ( OOOoOO . isConfirmed ( ) ) :
  I11IIIi = OOOoOO . getText ( )
  I11IIIi = I11IIIi . upper ( )
 else : quit ( )
 oO0o0o0ooO0oO = oo0o0O00 ( o0oO0 )
 iIIiiI1II1i11 = re . compile ( '<link>(.+?)</link>' ) . findall ( oO0o0o0ooO0oO )
 for I11 in iIIiiI1II1i11 :
  OOOO0OOoO0O0 = I11
  oO0o0o0ooO0oO = oo0o0O00 ( I11 )
  o0o0 = re . compile ( '<item>(.+?)</item>' ) . findall ( oO0o0o0ooO0oO )
  for i1iiIIiiI111 in o0o0 :
   oO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 )
   for O0oOOoOooooO in oO :
    O0oOOoOooooO = O0oOOoOooooO . upper ( )
    if I11IIIi in O0oOOoOooooO :
     try :
      if '<sportsdevil>' in i1iiIIiiI111 :
       oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
       i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
       I11 = re . compile ( '<sportsdevil>(.+?)</sportsdevil>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
       ii11iIi1I = re . compile ( '<referer>(.+?)</referer>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
       oO0o0o0ooO0oO = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url=' + I11
       I11 = oO0o0o0ooO0oO + '%26referer=' + ii11iIi1I
       if 'tp' in I11 :
        iiI1IiI ( oooOOOOO , I11 , 4 , i1iiIII111ii , O00ooooo00 )
      elif '<folder>' in i1iiIIiiI111 :
       oOOoO0 = re . compile ( '<title>(.+?)</title>.+?folder>(.+?)</folder>.+?thumbnail>(.+?)</thumbnail>.+?fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 )
       for oooOOOOO , I11 , i1iiIII111ii , II1 in oOOoO0 :
        if 'tp' in I11 :
         Oo0o0000o0o0 ( oooOOOOO , I11 , 1 , i1iiIII111ii , O00ooooo00 )
      else :
       i1iIIi1 = re . compile ( '<link>(.+?)</link>' ) . findall ( i1iiIIiiI111 )
       if len ( i1iIIi1 ) == 1 :
        oOOoO0 = re . compile ( '<title>(.+?)</title>.+?link>(.+?)</link>.+?thumbnail>(.+?)</thumbnail>.+?fanart>(.+?)</fanart>' ) . findall ( i1iiIIiiI111 )
        O0OoO000O0OO = len ( oO )
        for oooOOOOO , I11 , i1iiIII111ii , II1 in oOOoO0 :
         if 'youtube.com/playlist' in I11 :
          Oo0o0000o0o0 ( oooOOOOO , I11 , 2 , i1iiIII111ii , O00ooooo00 )
         else :
          if 'tp' in I11 :
           iiI1IiI ( oooOOOOO , I11 , 2 , i1iiIII111ii , O00ooooo00 )
       elif len ( i1iIIi1 ) > 1 :
        oooOOOOO = re . compile ( '<title>(.+?)</title>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
        i1iiIII111ii = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( i1iiIIiiI111 ) [ 0 ]
        iiI1IiI ( oooOOOOO , OOOO0OOoO0O0 , 3 , i1iiIII111ii , O00ooooo00 )
     except : pass
     if 49 - 49: o0O0 - i11iIiiIii . oOOOoo0O0OoO * I1iii % IiiI11Iiiii + ooOoo0O
     if 71 - 71: o0o0OOO0o0
def IIIIiIiIi1 ( name , url , iconimage ) :
 if 2 - 2: IiiI11Iiiii % II1iI * II1iI . o0o0OOO0o0 / IiiI11Iiiii
 Oo0O . create ( O0O0OO0O0O0 , "[COLORred]Opening Link...[/COLOR]" , '[COLORwhite][/COLOR]' , '' )
 Oo0O . update ( 0 )
 if 27 - 27: oo0Oo00Oo0 + oo0O0oOOO00oO - ooOoo0O
 iIIiIi1iIII1 = [ ]
 Ooo = [ ]
 O00oOOooo = [ ]
 oO0o0o0ooO0oO = oo0o0O00 ( url )
 iI1iIii11Ii = re . compile ( '<title>' + re . escape ( name ) + '</title>(.+?)</item>' , re . DOTALL ) . findall ( oO0o0o0ooO0oO ) [ 0 ]
 iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( iI1iIii11Ii ) [ 0 ]
 i1iIIi1 = re . compile ( '<link>(.+?)</link>' ) . findall ( iI1iIii11Ii )
 iioOooOOOoOo = 1
 for IIi1i1I11Iii in i1iIIi1 :
  I1i1i1 = IIi1i1I11Iii
  if '(' in IIi1i1I11Iii :
   IIi1i1I11Iii = IIi1i1I11Iii . split ( '(' ) [ 0 ]
   OoO0O00O0oo0O = str ( I1i1i1 . split ( '(' ) [ 1 ] . replace ( ')' , '' ) )
   iIIiIi1iIII1 . append ( IIi1i1I11Iii )
   Ooo . append ( OoO0O00O0oo0O )
  else :
   iIIiIi1iIII1 . append ( IIi1i1I11Iii )
   Ooo . append ( 'Link ' + str ( iioOooOOOoOo ) )
  iioOooOOOoOo = iioOooOOOoOo + 1
 name = '[COLOR red]' + name + '[/COLOR]'
 oo00 = xbmcgui . Dialog ( )
 II1I = oo00 . select ( name , Ooo )
 if II1I < 0 :
  quit ( )
 else :
  url = iIIiIi1iIII1 [ II1I ]
  print url
  if resolveurl . HostedMediaFile ( url ) . valid_url ( ) : I1IiI11 = resolveurl . HostedMediaFile ( url ) . resolve ( )
  elif liveresolver . isValid ( url ) == True : I1IiI11 = liveresolver . resolve ( url )
  else : I1IiI11 = url
  i1 = xbmcgui . ListItem ( name , iconImage = 'DefaultVideo.png' , thumbnailImage = iconimage )
  i1 . setPath ( I1IiI11 )
  xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , i1 )
  if 9 - 9: OO0oo0oOO
def OoooO ( name , url , iconimage ) :
 if 27 - 27: i1iIii1Ii1II
 IiIiIi = 'plugin://plugin.video.SportsDevil/?mode=1&amp;item=catcher%3dstreams%26url='
 iIIiIi1iIII1 = [ ]
 Ooo = [ ]
 O00oOOooo = [ ]
 ii111I = [ ]
 oO0o0o0ooO0oO = oo0o0O00 ( url )
 iI1iIii11Ii = re . compile ( '<title>' + re . escape ( name ) + '</title>(.+?)</item>' , re . DOTALL ) . findall ( oO0o0o0ooO0oO ) [ 0 ]
 i1iIIi1 = re . compile ( '<sportsdevil>(.+?)</sportsdevil>' ) . findall ( iI1iIii11Ii )
 iconimage = re . compile ( '<thumbnail>(.+?)</thumbnail>' ) . findall ( iI1iIii11Ii ) [ 0 ]
 iioOooOOOoOo = 1
 if 17 - 17: i1I . O0Oo0oO0o + oo0Oo00Oo0
 for IIi1i1I11Iii in i1iIIi1 :
  I1i1i1 = IIi1i1I11Iii
  if '(' in IIi1i1I11Iii :
   IIi1i1I11Iii = IIi1i1I11Iii . split ( '(' ) [ 0 ]
   OoO0O00O0oo0O = str ( I1i1i1 . split ( '(' ) [ 1 ] . replace ( ')' , '' ) )
   iIIiIi1iIII1 . append ( IIi1i1I11Iii )
   Ooo . append ( OoO0O00O0oo0O )
   ii111I . append ( 'Stream ' + str ( iioOooOOOoOo ) )
  else :
   iIIiIi1iIII1 . append ( IIi1i1I11Iii )
   Ooo . append ( 'Link ' + str ( iioOooOOOoOo ) )
   if 43 - 43: i1II1I11 . o0O0 / IIII
  iioOooOOOoOo = iioOooOOOoOo + 1
 name = '[COLOR red]' + name + '[/COLOR]'
 oo00 = xbmcgui . Dialog ( )
 II1I = oo00 . select ( name , Ooo )
 if II1I < 0 :
  quit ( )
 else :
  iI111I11I1I1 = Ooo [ II1I ]
  OOooO0OOoo = "/"
  if not iI111I11I1I1 . endswith ( OOooO0OOoo ) :
   iIii1 = iI111I11I1I1 + "/"
  else :
   iIii1 = iI111I11I1I1
  url = IiIiIi + iIIiIi1iIII1 [ II1I ] + "%26referer=" + iIii1
  print url
  if 20 - 20: i1I
  xbmc . Player ( ) . play ( url )
  if 95 - 95: IiiI11Iiiii - i1I
def I1ii1ii11i1I ( name , url , iconimage ) :
 if 58 - 58: IiiI11Iiiii + OO0oOoo
 II1I1I1Ii = True
 i1 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage ) ; i1 . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
 II1I1I1Ii = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = url , listitem = i1 )
 xbmc . Player ( ) . play ( url , i1 , False )
 if 70 - 70: oo0Oo00Oo0 % o0O0 + o0 / I1iii % O0Oo0oO0o
def ooooo ( name , url , iconimage ) :
 if 100 - 100: o0o0OOO0o0 + o0 * o0o0OOO0o0
 Oo0O . create ( O0O0OO0O0O0 , "[COLORred]Opening Link...[/COLOR]" , '[COLORwhite][/COLOR]' , '' )
 Oo0O . update ( 0 )
 if 80 - 80: o0o0OOO0o0 * O0Oo0oO0o - I1iii
 if 'youtube.com/playlist' in url :
  I11IIIi = url . split ( 'list=' ) [ 1 ]
  oo00O00Oo = Oo + I11IIIi + o0O
  OoooO00o = urllib2 . Request ( oo00O00Oo )
  OoooO00o . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
  o0O0o = urllib2 . urlopen ( OoooO00o )
  oO0o0o0ooO0oO = o0O0o . read ( )
  o0O0o . close ( )
  oO0o0o0ooO0oO = oO0o0o0ooO0oO . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '  ' , '' )
  oO = re . compile ( '"title": "(.+?)".+?"videoId": "(.+?)"' , re . DOTALL ) . findall ( oO0o0o0ooO0oO )
  try :
   oOOOo00O00oOo = re . compile ( '"nextPageToken": "(.+?)"' ) . findall ( oO0o0o0ooO0oO ) [ 0 ]
   oo00O00Oo = IiiIII111iI + oOOOo00O00oOo + IiII + I11IIIi + iI1Ii11111iIi
   Oo0o0000o0o0 ( 'Next Page >>' , oo00O00Oo , 2 , OOOo0 , II1 )
  except : pass
  for name , IIIII1II in oO :
   url = 'https://www.youtube.com/watch?v=' + IIIII1II
   iconimage = 'https://i.ytimg.com/vi/' + IIIII1II + '/hqdefault.jpg'
   if not 'Private video' in name :
    if not 'Deleted video' in name :
     iiI1IiI ( name , url , 2 , iconimage , II1 )
     if 35 - 35: II1iI
 if 'https://www.googleapis.com/youtube/v3' in url :
  I11IIIi = re . compile ( 'playlistId=(.+?)&maxResults' ) . findall ( url ) [ 0 ]
  OoooO00o = urllib2 . Request ( url )
  OoooO00o . add_header ( 'User-Agent' , 'Mozilla/5.0 (Windows; U; Windows NT 5.1; en-GB; rv:1.9.0.3) Gecko/2008092417 Firefox/3.0.3' )
  o0O0o = urllib2 . urlopen ( OoooO00o )
  oO0o0o0ooO0oO = o0O0o . read ( )
  o0O0o . close ( )
  oO0o0o0ooO0oO = oO0o0o0ooO0oO . replace ( '\r' , '' ) . replace ( '\n' , '' ) . replace ( '  ' , '' )
  oO = re . compile ( '"title": "(.+?)".+?"videoId": "(.+?)"' , re . DOTALL ) . findall ( oO0o0o0ooO0oO )
  try :
   oOOOo00O00oOo = re . compile ( '"nextPageToken": "(.+?)"' ) . findall ( oO0o0o0ooO0oO ) [ 0 ]
   oo00O00Oo = IiiIII111iI + oOOOo00O00oOo + IiII + I11IIIi + iI1Ii11111iIi
   Oo0o0000o0o0 ( 'Next Page >>' , oo00O00Oo , 2 , OOOo0 , II1 )
  except : pass
  if 42 - 42: oOOOoo0O0OoO . i1I . ooOoo0O + oOOO00o + o0 + i1I
  if 31 - 31: IiiI11Iiiii . o0 - oo0O0oOOO00oO . i1iIii1Ii1II / i1iIii1Ii1II
  if 56 - 56: oo0Oo00Oo0 / o0O0 / i11iIiiIii + i1iIii1Ii1II - OO0oOoo - OO0oo0oOO
  for name , IIIII1II in oO :
   url = 'https://www.youtube.com/watch?v=' + IIIII1II
   iconimage = 'https://i.ytimg.com/vi/' + IIIII1II + '/hqdefault.jpg'
   if not 'Private video' in name :
    if not 'Deleted video' in name :
     iiI1IiI ( name , url , 2 , iconimage , II1 )
     if 21 - 21: O0Oo0oO0o % I1I1i . i1I / i1II1I11 + I1I1i
     if 53 - 53: o0O0 - i1I - o0O0 * IiiI11Iiiii
 if resolveurl . HostedMediaFile ( url ) . valid_url ( ) : I1IiI11 = resolveurl . HostedMediaFile ( url ) . resolve ( )
 elif liveresolver . isValid ( url ) == True : I1IiI11 = liveresolver . resolve ( url )
 else : I1IiI11 = url
 i1 = xbmcgui . ListItem ( name , iconImage = 'DefaultVideo.png' , thumbnailImage = iconimage )
 i1 . setPath ( I1IiI11 )
 xbmcplugin . setResolvedUrl ( int ( sys . argv [ 1 ] ) , True , i1 )
 if 71 - 71: O0Oo0oO0o - II1iI
 if 'http' not in url :
  if '.ts' in url :
   url = 'plugin://plugin.video.f4mTester/?streamtype=TSDOWNLOADER&amp;name=' + name + '&amp;url=' + url
  elif 'acestream' in url :
   url = "plugin://program.plexus/?url=" + url + "&mode=1&name=acestream+"
   xbmc . Player ( ) . play ( url )
  elif resolveurl . HostedMediaFile ( url ) . valid_url ( ) :
   url = resolveurl . HostedMediaFile ( url ) . resolve ( )
  elif liveresolver . isValid ( url ) == True :
   url = liveresolver . resolve ( url )
  i1 = xbmcgui . ListItem ( name , iconImage = I1IiiI , thumbnailImage = I1IiiI )
  xbmc . Player ( ) . play ( url , i1 , False )
  quit ( )
  if 12 - 12: o0 / o0o0OOO0o0
def iiI1I1 ( url ) :
 if 56 - 56: i1I . O0Oo0oO0o + OO0oOoo
 xbmc . Player ( ) . play ( url )
 if 1 - 1: IiiI11Iiiii
def oo0o0O00 ( url ) :
 try :
  OoooO00o = urllib2 . Request ( url )
  OoooO00o . add_header ( 'User-Agent' , 'klopp' )
  o0O0o = urllib2 . urlopen ( OoooO00o )
  oO0o0o0ooO0oO = o0O0o . read ( )
  o0O0o . close ( )
  oO0o0o0ooO0oO = oO0o0o0ooO0oO . replace ( '\n' , '' ) . replace ( '\r' , '' ) . replace ( '<fanart></fanart>' , '<fanart>x</fanart>' ) . replace ( '<thumbnail></thumbnail>' , '<thumbnail>x</thumbnail>' ) . replace ( '<utube>' , '<link>https://www.youtube.com/watch?v=' ) . replace ( '</utube>' , '</link>' )
  print oO0o0o0ooO0oO
  return oO0o0o0ooO0oO
 except : quit ( )
 if 97 - 97: o0 + IiiI11Iiiii + O0Oo0oO0o + i11iIiiIii
def O000oo0O ( url ) :
 OoooO00o = urllib2 . Request ( url )
 OoooO00o . add_header ( 'User-Agent' , 'klopp' )
 o0O0o = urllib2 . urlopen ( OoooO00o )
 oO0o0o0ooO0oO = o0O0o . read ( )
 o0O0o . close ( )
 print oO0o0o0ooO0oO
 return oO0o0o0ooO0oO
 if 77 - 77: o0o0OOO0o0 / i1iIii1Ii1II
def IIii11I1i1I ( ) :
 o0o0OO0O00o = [ ]
 O0Oooo = sys . argv [ 2 ]
 if len ( O0Oooo ) >= 2 :
  iiIi1i = sys . argv [ 2 ]
  I1i11111i1i11 = iiIi1i . replace ( '?' , '' )
  if ( iiIi1i [ len ( iiIi1i ) - 1 ] == '/' ) :
   iiIi1i = iiIi1i [ 0 : len ( iiIi1i ) - 2 ]
  OOoOOO0 = I1i11111i1i11 . split ( '&' )
  o0o0OO0O00o = { }
  for iioOooOOOoOo in range ( len ( OOoOOO0 ) ) :
   I1I1iI1IIIiIiIi = { }
   I1I1iI1IIIiIiIi = OOoOOO0 [ iioOooOOOoOo ] . split ( '=' )
   if ( len ( I1I1iI1IIIiIiIi ) ) == 2 :
    o0o0OO0O00o [ I1I1iI1IIIiIiIi [ 0 ] ] = I1I1iI1IIIiIiIi [ 1 ]
 return o0o0OO0O00o
 if 27 - 27: IIII + oOOO00o - o0 + O0Oo0oO0o . I1iii
 if 46 - 46: I1I1i
def ii1iIi1iIiI1i ( name , url , mode , iconimage , itemcount , isFolder = False ) :
 iiI1iIii1i = name . partition ( '(' )
 OOooO0oo0o00o = ""
 ooOO0OoO = ""
 if len ( iiI1iIii1i ) > 0 :
  OOooO0oo0o00o = iiI1iIii1i [ 0 ]
  ooOO0OoO = iiI1iIii1i [ 2 ] . partition ( ')' )
 if len ( ooOO0OoO ) > 0 :
  ooOO0OoO = ooOO0OoO [ 0 ]
 Oo0 = metahandlers . MetaData ( )
 oooooOOO000Oo = Oo0 . get_meta ( 'movie' , name = OOooO0oo0o00o , year = ooOO0OoO )
 OO0OoO0o00 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&iconimage=" + urllib . quote_plus ( iconimage )
 II1I1I1Ii = True
 i1 = xbmcgui . ListItem ( name , iconImage = oooooOOO000Oo [ 'cover_url' ] , thumbnailImage = oooooOOO000Oo [ 'cover_url' ] )
 i1 . setInfo ( type = "Video" , infoLabels = oooooOOO000Oo )
 Ooo00OoOOO = [ ]
 Ooo00OoOOO . append ( ( 'Movie Information' , 'XBMC.Action(Info)' ) )
 i1 . addContextMenuItems ( Ooo00OoOOO , replaceItems = False )
 if not oooooOOO000Oo [ 'backdrop_url' ] == '' : i1 . setProperty ( 'fanart_image' , oooooOOO000Oo [ 'backdrop_url' ] )
 else : i1 . setProperty ( 'fanart_image' , II1 )
 II1I1I1Ii = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = OO0OoO0o00 , listitem = i1 , isFolder = isFolder , totalItems = itemcount )
 return II1I1I1Ii
 if 98 - 98: II1iI * IIII * o0 + oo0O0oOOO00oO % i11iIiiIii % O0Oo0oO0o
def Oo0o0000o0o0 ( name , url , mode , iconimage , fanart , description = '' ) :
 OO0OoO0o00 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&description=" + str ( description ) + "&fanart=" + urllib . quote_plus ( fanart )
 II1I1I1Ii = True
 i1 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 i1 . setInfo ( type = "Video" , infoLabels = { "Title" : name , 'plot' : description } )
 i1 . setProperty ( 'fanart_image' , fanart )
 if 'plugin://' in url : OO0OoO0o00 = url
 II1I1I1Ii = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = OO0OoO0o00 , listitem = i1 , isFolder = True )
 return II1I1I1Ii
 if 27 - 27: O0Oo0oO0o
def iiI1IiI ( name , url , mode , iconimage , fanart , description = '' ) :
 OO0OoO0o00 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&description=" + str ( description ) + "&fanart=" + urllib . quote_plus ( fanart )
 II1I1I1Ii = True
 i1 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 i1 . setProperty ( 'fanart_image' , fanart )
 i1 . setProperty ( "IsPlayable" , "true" )
 if 'plugin://' in url : OO0OoO0o00 = url
 II1I1I1Ii = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = OO0OoO0o00 , listitem = i1 , isFolder = False )
 return II1I1I1Ii
 if 79 - 79: o0o0OOO0o0 - OO0oo0oOO + o0o0OOO0o0 . o0O0
def ii1III11 ( string ) :
 I1iiIIIi11 = ( c for c in string if 0 < ord ( c ) < 127 )
 if 12 - 12: i1iIii1Ii1II % o0o0OOO0o0 * OO0oo0oOO % II1iI / I1iii
 return '' . join ( I1iiIIIi11 )
 if 27 - 27: i11iIiiIii % i1II1I11 % OO0oo0oOO . O0Oo0oO0o - OO0oOoo + oOOO00o
def ooO0o ( url ) :
 if 51 - 51: I1I1i
 oO0o0o0ooO0oO = oo0o0O00 ( url )
 oO = re . compile ( 'yt-lockup-playlist yt-lockup-grid"(.+?)<div class="yt-lockup-meta">' ) . findall ( oO0o0o0ooO0oO )
 for i1iIIi1 in oO :
  url = re . compile ( '<a href="(.+?)"' ) . findall ( i1iIIi1 ) [ 0 ]
  I1IiiI = re . compile ( 'data-thumb="(.+?)"' ) . findall ( i1iIIi1 ) [ 0 ] . replace ( '&amp;' , '&' )
  O0oOOoOooooO = re . compile ( '<div class="yt-lockup-content">.+?title="(.+?)"' ) . findall ( i1iIIi1 ) [ 0 ]
  O0oOOoOooooO = OooOooooOOoo0 ( O0oOOoOooooO )
  if not 'http' in url :
   ii11I1 = 'https://www.youtube.com/' + url
   Oo0o0000o0o0 ( "[COLOR skyblue][B]" + O0oOOoOooooO + "[/B][/COLOR]" , ii11I1 , 43 , I1IiiI , II1 )
 SET_VIEW ( )
 if 75 - 75: oo0Oo00Oo0 / i1II1I11 % O0Oo0oO0o
def Ii111iIi1iIi ( url ) :
 if 21 - 21: o0O0 / IIII + I1iii + i1iIii1Ii1II
 oO0o0o0ooO0oO = oo0o0O00 ( url )
 oO = re . compile ( '<li class="yt-uix-scroller-scroll-unit(.+?)<span class="vertical-align">' ) . findall ( oO0o0o0ooO0oO )
 for i1iIIi1 in oO :
  O0oOOoOooooO = re . compile ( 'video-title="(.+?)"' , re . DOTALL ) . findall ( i1iIIi1 ) [ 0 ]
  O0oOOoOooooO = OooOooooOOoo0 ( O0oOOoOooooO )
  I1IiiI = re . compile ( 'url="(.+?)"' , re . DOTALL ) . findall ( i1iIIi1 ) [ 0 ] . replace ( '&amp;' , '&' )
  II1 = re . compile ( 'url="(.+?)"' , re . DOTALL ) . findall ( i1iIIi1 ) [ 0 ] . replace ( '&amp;' , '&' )
  url = re . compile ( '<a href="(.+?)"' ) . findall ( i1iIIi1 ) [ 0 ]
  if not 'http' in url :
   if not 'Deleted video' in O0oOOoOooooO :
    ii11I1 = 'https://www.youtube.com' + url
    iiI1IiI ( "[COLORyellow][B]" + O0oOOoOooooO + "[/B][/COLOR]" , ii11I1 , 2 , I1IiiI , II1 )
    if 91 - 91: i11iIiiIii / ooOoo0O + IiiI11Iiiii + oo0O0oOOO00oO * i11iIiiIii
    if 66 - 66: II1iI % ooOoo0O - O0Oo0oO0o + OO0oo0oOO * oOOOoo0O0OoO . I1I1i
    if 52 - 52: oo0O0oOOO00oO + O0Oo0oO0o . IiiI11Iiiii . IIII . oo0Oo00Oo0
    if 97 - 97: i1I / IiiI11Iiiii
    if 71 - 71: i1II1I11 / ooOoo0O . IIII % i1iIii1Ii1II . oOOO00o
    if 41 - 41: ooOoo0O * i1II1I11 / i1iIii1Ii1II . o0
    if 83 - 83: IiiI11Iiiii . O0Oo0oO0o / OO0oOoo / o0 - i1II1I11
    if 100 - 100: oo0Oo00Oo0
    if 46 - 46: oOOO00o / II1iI % IiiI11Iiiii . II1iI * IiiI11Iiiii
    if 38 - 38: IIII - IiiI11Iiiii / O0Oo0oO0o . oOOOoo0O0OoO
    if 45 - 45: oOOOoo0O0OoO
    if 83 - 83: oOOO00o . i1iIii1Ii1II
    if 58 - 58: i11iIiiIii + i1iIii1Ii1II % i1iIii1Ii1II / I1I1i / i11iIiiIii
    if 62 - 62: oo0Oo00Oo0 / IIII
    if 7 - 7: i1iIii1Ii1II . I1I1i
    if 53 - 53: I1iii % I1iii * o0o0OOO0o0 + oOOO00o
    if 92 - 92: i1iIii1Ii1II + ooOoo0O / I1iii * O0Oo0oO0o
    if 100 - 100: oo0O0oOOO00oO % II1iI * i1II1I11 - IiiI11Iiiii
    if 92 - 92: oo0O0oOOO00oO
    if 22 - 22: OO0oOoo % IiiI11Iiiii * IIII / o0 % i11iIiiIii * OO0oo0oOO
    if 95 - 95: i1iIii1Ii1II - I1I1i * i1I + oOOO00o
    if 10 - 10: o0o0OOO0o0 / i11iIiiIii
    if 92 - 92: OO0oo0oOO . oOOOoo0O0OoO
    if 85 - 85: IIII . oOOOoo0O0OoO
    if 78 - 78: oo0O0oOOO00oO * oOOOoo0O0OoO + II1iI + II1iI / oOOOoo0O0OoO . I1iii
    if 97 - 97: oo0O0oOOO00oO / oOOOoo0O0OoO % ooOoo0O % IIII
    if 18 - 18: II1iI % OO0oo0oOO
def O00oO0 ( ) :
 if 97 - 97: oOOOoo0O0OoO - II1iI
 I11 = 'http://www.worldfootball.net/teams/liverpool-fc/'
 oO0o0o0ooO0oO = oo0o0O00 ( I11 ) . replace ( '\n' , '' ) . replace ( '\r' , '' ) . replace ( '\t' , '' )
 oO = re . compile ( '<div class="wfb-news-medium">(.+?)<script type="text/javascript">' ) . findall ( oO0o0o0ooO0oO ) [ 0 ]
 oo0o0O0Oooooo = re . compile ( '<img src="(.+?)".+?<a href="(.+?)" title="(.+?)"' ) . findall ( oO )
 for I1IiiI , I11 , O0oOOoOooooO in oo0o0O0Oooooo :
  if not 'http' in I11 :
   I11 = 'http://www.worldfootball.net' + I11
   iiI1IiI ( "[COLORyellow][B]" + O0oOOoOooooO + "[/B][/COLOR]" , I11 , 19 , I1IiiI , O00ooooo00 )
   if 1 - 1: oo0O0oOOO00oO % oOOO00o * OO0oOoo
def o0O0oo0 ( url ) :
 if 30 - 30: O0Oo0oO0o * i1iIii1Ii1II
 oO0o0o0ooO0oO = oo0o0O00 ( url )
 oO = re . compile ( '<div class="wfb-news-content">(.+?)</div>' ) . findall ( oO0o0o0ooO0oO ) [ 0 ] . replace ( '<p>' , '' ) . replace ( '</p>' , '' ) . replace ( '"' , '' )
 I1iIIIi1 = O0O0OO0O0O0
 oo0OooOOo0 ( I1iIIIi1 , oO )
 if 17 - 17: II1iI . i1iIii1Ii1II / OO0oo0oOO % i1II1I11 % ooOoo0O / i11iIiiIii
def oo0OooOOo0 ( heading , text ) :
 if 58 - 58: OO0oOoo . i1II1I11 + o0O0 - i11iIiiIii / i1II1I11 / O0Oo0oO0o
 id = 10147
 xbmc . executebuiltin ( 'ActivateWindow(%d)' % id )
 xbmc . sleep ( 500 )
 oOOoOo = xbmcgui . Window ( id )
 ooOooo0 = 50
 while ( ooOooo0 > 0 ) :
  try :
   xbmc . sleep ( 10 )
   ooOooo0 -= 1
   oOOoOo . getControl ( 1 ) . setLabel ( heading )
   oOOoOo . getControl ( 5 ) . setText ( text )
   quit ( )
   return
  except : pass
  if 67 - 67: i1I
def oOo0oooo00o ( name , url , mode , iconimage , fanart , description = '' ) :
 OO0OoO0o00 = sys . argv [ 0 ] + "?url=" + urllib . quote_plus ( url ) + "&mode=" + str ( mode ) + "&name=" + urllib . quote_plus ( name ) + "&fanart=" + urllib . quote_plus ( fanart )
 II1I1I1Ii = True
 i1 = xbmcgui . ListItem ( name , iconImage = "DefaultFolder.png" , thumbnailImage = iconimage )
 i1 . setInfo ( type = "Video" , infoLabels = { "Title" : name } )
 i1 . setProperty ( "Fanart_Image" , fanart )
 II1I1I1Ii = xbmcplugin . addDirectoryItem ( handle = int ( sys . argv [ 1 ] ) , url = OO0OoO0o00 , listitem = i1 , isFolder = False )
 return II1I1I1Ii
 if 55 - 55: IIII - IiiI11Iiiii * o0o0OOO0o0 + oOOO00o * oOOO00o * O0Oo0oO0o
def O000Oo0o ( url ) :
 if 99 - 99: II1iI % oo0O0oOOO00oO + oo0O0oOOO00oO + IiiI11Iiiii - oOOOoo0O0OoO / oOOOoo0O0OoO
 iiiI11 = "ShowPicture(" + url + ')'
 xbmc . executebuiltin ( iiiI11 )
 sys . exit ( 1 )
 if 63 - 63: oo0Oo00Oo0 + IIII . oOOOoo0O0OoO % oOOOoo0O0OoO
def I1ii11iI ( text , pattern ) :
 if 57 - 57: i1II1I11
 oOOOoo = ""
 try :
  Ii1ii111i1 = re . findall ( pattern , text , flags = re . DOTALL )
  oOOOoo = Ii1ii111i1 [ 0 ]
 except :
  oOOOoo = ""
  if 31 - 31: o0 + O0Oo0oO0o
 return oOOOoo
 if 87 - 87: oo0O0oOOO00oO
def oo0OooOOo0 ( heading , text ) :
 id = 10147
 xbmc . executebuiltin ( 'ActivateWindow(%d)' % id )
 xbmc . sleep ( 500 )
 oOOoOo = xbmcgui . Window ( id )
 ooOooo0 = 50
 while ( ooOooo0 > 0 ) :
  try :
   xbmc . sleep ( 10 )
   ooOooo0 -= 1
   oOOoOo . getControl ( 1 ) . setLabel ( heading )
   oOOoOo . getControl ( 5 ) . setText ( text )
   return
  except :
   pass
   if 45 - 45: oo0Oo00Oo0 / i1iIii1Ii1II - IiiI11Iiiii / I1iii % I1I1i
def II ( link ) :
 try :
  oO = re . compile ( '<layouttype>(.+?)</layouttype>' ) . findall ( link ) [ 0 ]
  if layout == 'thumbnail' : xbmc . executebuiltin ( 'Container.SetViewMode(500)' )
  else : xbmc . executebuiltin ( 'Container.SetViewMode(50)' )
 except : pass
 if 83 - 83: i1I . II1iI - I1I1i * i11iIiiIii
iiIi1i = IIii11I1i1I ( ) ; I11 = None ; oooOOOOO = None ; IiI11i1IIiiI = None ; oOOo000oOoO0 = None ; i1iiIII111ii = None
try : oOOo000oOoO0 = urllib . unquote_plus ( iiIi1i [ "site" ] )
except : pass
try : I11 = urllib . unquote_plus ( iiIi1i [ "url" ] )
except : pass
try : oooOOOOO = urllib . unquote_plus ( iiIi1i [ "name" ] )
except : pass
try : IiI11i1IIiiI = int ( iiIi1i [ "mode" ] )
except : pass
try : i1iiIII111ii = urllib . unquote_plus ( iiIi1i [ "iconimage" ] )
except : pass
try : II1 = urllib . unquote_plus ( iiIi1i [ "fanart" ] )
except : pass
if 86 - 86: i1II1I11 % i11iIiiIii + I1iii % i11iIiiIii
if IiI11i1IIiiI == None or I11 == None or len ( I11 ) < 1 : i1I1Iiii1111 ( )
elif IiI11i1IIiiI == 1 : o00OO00OoO ( oooOOOOO , I11 , i1iiIII111ii , II1 )
elif IiI11i1IIiiI == 2 : ooooo ( oooOOOOO , I11 , i1iiIII111ii )
elif IiI11i1IIiiI == 3 : IIIIiIiIi1 ( oooOOOOO , I11 , i1iiIII111ii )
elif IiI11i1IIiiI == 4 : I1ii1ii11i1I ( oooOOOOO , I11 , i1iiIII111ii )
elif IiI11i1IIiiI == 5 : oOo0 ( )
elif IiI11i1IIiiI == 6 : iIIIi1 ( I11 )
elif IiI11i1IIiiI == 7 : iiI1I1 ( I11 )
elif IiI11i1IIiiI == 8 : OoooO ( oooOOOOO , I11 , i1iiIII111ii )
elif IiI11i1IIiiI == 9 : O000Oo0o ( I11 )
elif IiI11i1IIiiI == 10 : I1 ( )
if 92 - 92: i11iIiiIii - IiiI11Iiiii / oo0O0oOOO00oO / o0O0
elif IiI11i1IIiiI == 12 : GET_REGEX ( oooOOOOO , I11 , i1iiIII111ii )
elif IiI11i1IIiiI == 13 : Ii ( I11 )
elif IiI11i1IIiiI == 15 : I1i1IIIiiII1 ( oooOOOOO , I11 )
if 43 - 43: i1II1I11 + o0 + IiiI11Iiiii
elif IiI11i1IIiiI == 16 : OoOOOOO ( )
elif IiI11i1IIiiI == 17 : ii ( )
elif IiI11i1IIiiI == 42 : ooO0o ( I11 )
elif IiI11i1IIiiI == 43 : Ii111iIi1iIi ( I11 )
elif IiI11i1IIiiI == 71 : iIIIi1 ( I11 )
elif IiI11i1IIiiI == 72 : YOUTUBE_CHANNEL_PART2 ( I11 )
elif IiI11i1IIiiI == 317 : OO ( )
elif IiI11i1IIiiI == 318 : I11iI ( oooOOOOO , I11 , i1iiIII111ii )
elif IiI11i1IIiiI == 319 : oOO00O ( I11 )
elif IiI11i1IIiiI == 320 : iIiii1i111iI1 ( )
elif IiI11i1IIiiI == 321 : o0Ooo00o0Oooo ( )
elif IiI11i1IIiiI == 322 : II11 ( )
elif IiI11i1IIiiI == 323 : i11ii1iI ( oooOOOOO , I11 )
xbmcplugin . endOfDirectory ( int ( sys . argv [ 1 ] ) )
# dd678faae9ac167bc83abf78e5cb2f3f0688d3a3
]')